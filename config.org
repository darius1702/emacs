#+TITLE: Emacs configuration
#+AUTHOR: Darius Schefer
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Basic window stuff
** Default clutter
Adjust some default settings

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
  (blink-cursor-mode 0)
  (setq frame-resize-pixelwise t)
#+END_SRC

** Annoying files
Disble all annoying auto-generated files and make ~custom-set-variables~ go to its own file

#+BEGIN_SRC emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (setq backup-by-copying t)
  (setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo" user-emacs-directory))))

  ;; Enable when lockfiles become annoying
  ;; (setq create-lockfiles nil)

  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Better editing experience
Line numbers, parentheses, line highlighting, ...

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
  (column-number-mode t)
  (show-paren-mode t)
  (hl-line-mode t)
  (add-to-list 'write-file-functions 'delete-trailing-whitespace)
#+END_SRC

** Font setup
Iosevka is the best font fight me.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font Mono" :height 180)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'regular)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font Mono")
#+END_SRC

** Color scheme

#+BEGIN_SRC emacs-lisp
  ; (mapc #'disable-theme custom-enabled-themes)
  (load-theme 'base16-tomorrow-night t)
#+END_SRC

* Packages
Install and setup some useful packages

** Setup
Basic ~package~ config

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Useful random stuff
Some packages that don't fit the other categories

#+BEGIN_SRC emacs-lisp
  (use-package diminish)

  (use-package undo-tree
    :diminish
    :config
    (global-undo-tree-mode))

  (use-package git-gutter
    :diminish
    :config (global-git-gutter-mode t))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode)
#+END_SRC

** Org
Some org-mode tweaks

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC

** Completion
Set up vertico, orderless and savehist and tweak some emacs completion defaults

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(substring orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package savehist
    :init (savehist-mode))
#+END_SRC

** Marginalia
Marginalia shows some additional information inside the minibuffer

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :init (marginalia-mode))
#+END_SRC

** Colorscheme
The most important thing tbh

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme)
#+END_SRC
