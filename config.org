#+TITLE: Emacs configuration
#+AUTHOR: Darius Schefer
#+PROPERTY: header-args:emacs-lisp :tangle init.el :mkdirp yes
#+STARTUP: show2levels

* Build flags
Nativecomp, pgtk, tree-sitter, ...

#+begin_src sh
./configure --with-native-compilation=aot --with-tree-sitter --with-pgtk --with-imagemagick --without-compress-install --disable-gc-mark-trace --enable-link-time-optimization 'CFLAGS=-O3 -march=native'
#+end_src


* Early init
** No premature redisplay
Prevent some flickering on startup
(Doesn't really prevent any flickering)

#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t -*-
(setq-default inhibit-redisplay t
              inhibit-message t)
(add-hook 'window-setup-hook
          (lambda ()
            (setq-default inhibit-redisplay nil
                          inhibit-message nil)
            (redisplay)))
#+end_src

** Faster startup
Change some variables until after startup to make emacs load faster

#+begin_src emacs-lisp :tangle early-init.el
(setopt gc-cons-threshold (eval-when-compile (* 5 1024 1024 1024)))

(defvar darius/file-name-handler-alist file-name-handler-alist)
(setopt file-name-handler-alist nil)

(defvar darius/vc-handled-backends vc-handled-backends)
(setopt vc-handled-backends nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setopt file-name-handler-alist darius/file-name-handler-alist
                    vc-handled-backends     darius/vc-handled-backends)))
#+end_src

** Default clutter
Adjust some default settings

#+begin_src emacs-lisp :tangle early-init.el
(setopt inhibit-startup-message t)
(setopt native-comp-async-report-warnings-errors nil)
(setopt initial-scratch-message "")
(setopt server-client-instructions nil)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(blink-cursor-mode 0)
(setopt frame-resize-pixelwise t)
(setopt use-dialog-box nil)
(setopt use-short-answers t)
(winner-mode t)                         ; window layout history
(undelete-frame-mode t)
#+end_src

* Basic stuff
** Annoying files
Disble all annoying auto-generated files and make ~custom-set-variables~ go to their own file

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setopt auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t))
        auto-save-no-message t)
(setopt backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setopt backup-by-copying t)

;; Enable when lockfiles become annoying
;; (setopt create-lockfiles nil)

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Better editing experience
Some sensible defaults

*** Keybinds
Unbind some defaults and replace others with the dwim variant

#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c"))            ; stop accidentally quitting emacs
(global-unset-key (kbd "C-x C-z"))            ; stop accidentally suspending emacs
(global-unset-key (kbd "C-z"))                ; stop accidentally suspending emacs (other binding)

(global-set-key (kbd "C-x C-z") 'find-grep)   ; something more useful

(global-set-key (kbd "M-z") 'zap-up-to-char)  ; instead of zap-to-char

(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-c r") 'recompile)

(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "C-M-o") 'window-layout-transpose)

(global-set-key (kbd "C-<tab>") 'mode-line-other-buffer)

;; Act on region if active, otherwise on line
(global-set-key (kbd "M-D") 'duplicate-dwim)

;; Act on region if active, otherwise on word
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)

(global-set-key (kbd "M-n") 'next-error)
(global-set-key (kbd "M-p") 'previous-error)

(global-set-key (kbd "M-N") 'flymake-goto-next-error)
(global-set-key (kbd "M-P") 'flymake-goto-prev-error)

(global-set-key (kbd "M-g b") 'bookmark-jump)

(global-set-key (kbd "M-g r") 'recentf-open)
(global-set-key (kbd "M-g R") 'recentf-open-files)

(global-unset-key (kbd "C-<wheel-up>"))
(global-unset-key (kbd "C-<wheel-down>"))
(global-unset-key (kbd "<pinch>"))
#+end_src

*** Misc
Other settings

#+begin_src emacs-lisp
(setopt kill-region-dwim 'emacs-word)     ; make C-w delete a word backwards when no region is active

(add-to-list 'load-path (file-name-concat user-emacs-directory "external"))

(setopt highlight-nonselected-windows t)  ; show region in inactive windows

(xterm-mouse-mode 1)       ; make the mouse wheel scroll the buffer
(setopt visible-cursor nil)  ; disable blinking cursor in terminal

(run-with-idle-timer 2 t (lambda () (garbage-collect)))

(setopt confirm-kill-emacs 'yes-or-no-p)  ; just in case

(setopt suggest-key-bindings nil
        echo-keystrokes 0.01
        echo-keystrokes-help nil)
(which-key-mode)
(setopt which-key-lighter "")            ; diminish

(setopt read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case nil ;; setting this to t breaks vertico
        completion-ignore-case t)

(setopt comint-prompt-read-only t)

(setopt bookmark-fringe-mark nil)

;;; disabled because ultra-scroll
;; (setopt scroll-conservatively 5)
;; (setopt scroll-margin 1)
;; (pixel-scroll-precision-mode 1)
;; (setopt pixel-scroll-precision-interpolate-mice nil)

;; consult has an xref function
;; (setopt xref-show-definitions-function #'xref-show-definitions-completing-read)

(setopt display-line-numbers-type 'relative
        display-line-numbers-width 3
        display-line-numbers-grow-only t)
(global-visual-line-mode 1)
(setopt text-scale-mode-step 1.05)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(add-to-list 'write-file-functions 'delete-trailing-whitespace)
(setopt require-final-newline t)

(setopt imenu-auto-rescan t)

(editorconfig-mode t)

(recentf-mode t)
(setopt recentf-auto-cleanup 'never
        recentf-max-menu-items 0
        recentf-max-saved-items 100)

(setopt save-interprogram-paste-before-kill t) ; save clipboard to kill ring before overwriting it
(setopt mouse-yank-at-point t)

(setopt sentence-end-double-space nil
        sentence-end "[.\",;!?*:'] ")

(setopt ispell-dictionary "en_US"
        ispell-program-name "hunspell"
        ispell-alternate-dictionary "/usr/share/dict/words") ;; TODO this needs extra/words on arch

(setopt isearch-wrap-pause 'no-ding
        isearch-lazy-count t
        lazy-count-prefix-format "(%s/%s) "
        search-whitespace-regexp ".*?")

(setopt compilation-max-output-line-length 800
        compilation-scroll-output t
        compile-command "")

(require 'ansi-color)
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter) ; fix colors in compilation output

(setopt tab-bar-show 1)                   ; only show tab bar on frames with more than one tab
(setopt tab-bar-close-button-show nil)
(column-number-mode t)
(show-paren-mode t)
(setopt show-paren-when-point-inside-paren t)
(setopt global-auto-revert-non-file-buffers t)
(electric-pair-mode t)

(setopt enable-recursive-minibuffers t
        minibuffer-eldef-shorten-default t)
(minibuffer-depth-indicate-mode t)
(minibuffer-electric-default-mode t)

(setopt whitespace-style '(face tabs spaces trailing space-before-tab newline indentation empty space-after-tab space-mark tab-mark))

(setopt read-process-output-max (* 1024 1024 4))
#+end_src

** Prog-mode setup
Make programming-modes a little nicer with line numbers and current line highlighting

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
;; (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Man pages
Make manpages look a little better

#+begin_src emacs-lisp
(use-package man
  :ensure nil
  :config
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-keyword-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-string-face :underline t)
  :bind ("C-c m" . 'man))
#+end_src

** Ibuffer
Buffer switching and management

#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)
         (:map ibuffer-mode-map ("M-o" . other-window)))
  :hook (ibuffer-mode . (lambda ()
                          (ibuffer-switch-to-saved-filter-groups "default")
                          (ibuffer-auto-mode t)))
  :custom
  (ibuffer-expert t)
  (ibuffer-display-summary nil)
  (ibuffer-saved-filter-groups
   (quote (("default"
            ("Code" (or (derived-mode . prog-mode) (mode . ess-mode)
                        (mode . compilation-mode)))
            ("LaTeX" (filename . "\\.tex$"))
            ("Dired" (mode . dired-mode))
            ("Org" (mode . org-mode))
            ("Pdf" (mode . pdf-view-mode))
            ("Help" (or (mode . help-mode) (mode . Man-mode)))
            ("Git" (name . "^magit"))
            ("Misc" (name . "^\\**.*\\*$"))))))
  (ibuffer-formats
   '((mark modified read-only vc-status-mini " "
           (name 18 18 :left :elide)
           " "
           (size 9 -1 :right)
           " "
           (mode 16 16 :left :elide)
           " "
           (vc-status 16 16 :left)))))
#+end_src

** Dired
Make dired recognize other buffers as copy/move targets and also list human-readable filesizes

#+begin_src emacs-lisp
(defun darius/dired-create-directory ()
  "Wrapper around `dired-create-directory' with no minibuffer completion."
  (interactive)
  (let ((dir
         (read-from-minibuffer "Make directory: ")))
    (dired-create-directory dir)))

(use-package dired
  :ensure nil
  :custom
  (dired-dwim-target t)
  (dired-listing-switches "-alh")
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-auto-revert-buffer t)
  :bind
  ("<mouse-8>" . dired-jump) ;; back button

  (:map dired-mode-map
        ("+" . darius/dired-create-directory)
        ("<mouse-2>" . dired-mouse-find-file)
        ("SPC" . dired-jump)
        ("b" . dired-jump))
  :config
  ;; Make `dired-do-shell-command' suggest better defaults for some filetypes
  (add-to-list 'dired-guess-shell-alist-user '("\\.pdf\\'" "zathura"))
  (add-to-list 'dired-guess-shell-alist-user '("\\.mp4\\'" "mpv")))
#+end_src

** Proced
Interact with running processes

#+begin_src emacs-lisp
(use-package proced
  :ensure nil
  :commands proced
  :custom
  (proced-auto-update-flag t)
  (proced-goal-attribute nil)
  (proced-enable-color-flag t)
  (proced-format 'custom)
  :config
  (add-to-list 'proced-format-alist
               '(custom user pid tree pcpu rss start time (args comm))))
#+end_src

** Default Applications
Default programs for opening filetypes
This is probably he wrong way to do it?

#+begin_src emacs-lisp
(setopt org-file-apps
        '((auto-mode . emacs)
          (directory . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)))
#+end_src

** Ediff
Diff files

#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :custom
  (ediff-keep-variants nil)
  (ediff-make-buffers-readonly-at-startup t)
  (ediff-show-clashes-only t)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** COMMENT Font setup
Need to set it in an extra hook to make it work in emacsclient frames.
Font setup moved to [[*Fontaine][Fontaine]].

#+begin_src emacs-lisp
;; (defun darius/set-up-fonts ()
;;   "Load face attributes for fixed and variable-pitch fonts"
;;   (interactive)
;;   (let ((darius/fixed-pitch-font "Iosevka NFP")
;;         (darius/variable-pitch-font "Iosevka Aile"))
;;     (set-face-attribute 'default nil :font darius/fixed-pitch-font :height 130 :weight 'regular)
;;     (set-face-attribute 'variable-pitch nil :font darius/variable-pitch-font :height 1.0 :weight 'semilight)
;;     (set-face-attribute 'fixed-pitch nil :font darius/fixed-pitch-font :height 1.0 :weight 'regular)))

;; (add-hook 'after-init-hook 'darius/set-up-fonts)
;; (add-hook 'server-after-make-frame-hook 'darius/set-up-fonts)
#+end_src

** Eshell
Emacs shell aliases

#+begin_src sh :tangle eshell/alias
alias ff find-file $1
alias d dired $1

alias la ls -A
alias ll ls -lh
alias lla ls -lhA
alias l ls

alias gs magit-status
#+end_src

** TRAMP
Remote editing

#+begin_src emacs-lisp
(setopt remote-file-name-inhibit-locks t
        tramp-use-scp-direct-remote-copying t
        remote-file-name-inhibit-auto-save-visited t)
#+end_src

* Packages
** Setup
Basic ~package.el~ config

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; NOTE: apparently this is not needed? I have no idea how package.el works tbh
;; (package-initialize)
;; (unless package-archive-contents
;; (package-refresh-contents))
(setopt use-package-always-ensure t)
(setopt package-native-compile t)         ; this will just be ignored if native-comp isn't available
#+end_src

** Useful random stuff
Some packages that don't require much configuration

*** Envrc
Load ~.envrc~ files from ~direnv~

#+begin_src emacs-lisp
(let ((nix-bin-path "/home/darius/.nix-profile/bin/"))
  (use-package envrc
    :init
    (add-to-list 'exec-path nix-bin-path)
    (setenv "PATH" (concat nix-bin-path ":" (getenv "PATH")))
    ;; :bind (:map envrc-mode-map ("C-c e" . envrc-command-map))
    :custom (envrc-none-lighter nil)
    :hook (after-init . envrc-global-mode)))
#+end_src

*** Ibuffer-vc
Version control integration for Ibuffer

#+begin_src emacs-lisp
(use-package ibuffer-vc)
#+end_src

*** Marginalia
Usful info in the minibuffer

#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

*** Rainbow-mode
Colorize strings like #a7c080

#+begin_src emacs-lisp
(use-package rainbow-mode
  :config (rainbow-mode)
  :diminish rainbow-mode)
#+end_src

*** hl-todo
Highlight keywords like TODO and FIXME in comments in source code

#+begin_src emacs-lisp
(use-package hl-todo
  :bind ("M-s t" . hl-todo-occur)
  :hook (prog-mode . hl-todo-mode))
#+end_src

*** Multiple cursors
Easily place multiple cursors for edits

#+begin_src emacs-lisp
(use-package multiple-cursors
  :custom ((mc/always-run-for-all t)
           (mc/cmds-to-run-once nil))

  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this-word)
         ("C-M->" . mc/skip-to-next-like-this)
         ("C-<" . mc/mark-previous-like-this-word)
         ("C-M-<" . mc/skip-to-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

*** TLDR pages
Read tldr pages in emacs

#+begin_src emacs-lisp
(use-package tldr
  :bind ("C-c t" . tldr))
#+end_src

*** Nov mode
Read epubs in emacs

#+begin_src emacs-lisp
(use-package nov
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

*** PDFgrep mode
Grep in pdfs

#+begin_src emacs-lisp
(use-package pdfgrep
  :config (pdfgrep-mode))
#+end_src

*** Embark
Very cool
Still not 100% sure I get what it does

#+begin_src emacs-lisp
(use-package embark
  :custom (embark-mixed-indicator-delay nil)
  :bind ("C-." . embark-act))

(use-package embark-consult)
#+end_src

*** CSV-mode
Prettier csv files

#+begin_src emacs-lisp
(use-package csv-mode
  :hook (csv-mode . csv-align-mode))
#+end_src

*** TMR
Set timers

#+begin_src emacs-lisp
(use-package tmr
  :custom
  (tmr-sound-file nil))
#+end_src

*** Sudoedit
Sudoedit files a little nicer than the built-in /sudoedit::

#+begin_src emacs-lisp
(use-package sudo-edit
  :defer t)
#+end_src

*** Expand region
Expand the region

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("M-j" . er/expand-region))
#+end_src

*** EAT
Emulate a terminal

#+begin_src emacs-lisp
(use-package eat
  :bind (:map eat-semi-char-mode-map
              ("M-o" . other-window)))
#+end_src

*** Doom modeline
Make the modeline a little prettier

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 26)
  (doom-modeline-bar-width 4)
  (doom-modeline-minor-modes nil) ;; nil is the default but otherwise I forget this exists
  (doom-modeline-icon nil))
#+end_src

*** Dired subtree
Expand directories in dired

#+begin_src emacs-lisp
(use-package dired-subtree
  :bind (:map dired-mode-map (("<TAB>" . 'dired-subtree-toggle))))
#+end_src

*** Ultra-scroll
Doesn't have this one annoying bug that pixel-scroll-precision-mode has that
makes the page jump backwards when scrolling with the caret all the way at the
top of the screen.

For some reason this gives a 'You are not currently on a branch' git error when trying to upgrade,
no idea why.

#+begin_src emacs-lisp
(use-package ultra-scroll
  :vc (:url "https://github.com/jdtsmith/ultra-scroll" :branch "main")
  :init
  (setopt scroll-conservatively 3
          scroll-margin 0) ; scroll-margin > 0 doesn't work with ultra-scroll yet
  :config
  (ultra-scroll-mode 1))
#+end_src

*** Fontaine
Font presets (lots of them because I can't decide)

#+begin_src emacs-lisp
(use-package fontaine
  :custom
  (fontaine-presets
   '((regular
      :default-family "Iosevka NFP"
      :default-weight regular
      :default-height 130
      :fixed-pitch-weight nil ; falls back to :default-weight
      :variable-pitch-family "Iosevka Aile"
      :variable-pitch-weight semilight
      :bold-family nil
      :italic-family nil)
     (hasklug
      :inherit regular
      :default-family "Hasklug Nerd Font Propo")
     (roboto
      :inherit regular
      :default-family "RobotoMono Nerd Font Propo")
     (large
      :inherit regular
      :default-height 200)
     (has-large
      :inherit regular
      :default-height 200
      :default-family "Hasklug Nerd Font Propo")
     (rob-large
      :inherit regular
      :default-height 190
      :default-family "RobotoMono Nerd Font Propo")
     (present
      :inherit regular
      :default-family "RobotoMono Nerd Font Propo"
      :default-height 250)))
  :config
  (defun darius/reapply-fontaine ()
    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'present)))
  (darius/reapply-fontaine)
  (fontaine-mode 1)
  (define-key global-map (kbd "C-c f") #'fontaine-set-preset)
  (add-hook 'server-mode-hook 'darius/reapply-fontaine))
#+end_src

*** Dumb Jump
Jump to definition

#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

*** Eldoc-Box
Eldoc in a popup frame

#+begin_src emacs-lisp
(setopt eldoc-echo-area-use-multiline-p nil)
(use-package eldoc-box
  :bind ("C-c k" . #'eldoc-box-help-at-point))
#+end_src

** Git
Some git tools

*** Magit
Very nice git interface

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :bind ("C-x g" . magit-status))
#+end_src

*** Diff-hl
Show uncommitted changes in the fringe

#+begin_src emacs-lisp
(use-package diff-hl
  :hook
  (magit-post-refresh . diff-hl-magit-post-refresh)
  :config
  (global-diff-hl-mode)
  :bind
  ("C-c v n" . diff-hl-next-hunk)
  ("C-c v p" . diff-hl-previous-hunk)
  ("C-c v s" . diff-hl-show-hunk))
#+end_src

** Consult
Some nice additional completing-read stuff

#+begin_src emacs-lisp
(use-package consult
  :custom
  (xref-show-definitions-function #'consult-xref)
  (xref-show-xrefs-function #'consult-xref)
  :config
  (defun darius/consult-ripgrep-hidden ()
    "Call rg with additional --hidden flag"
    (interactive)
    (let* ((consult-ripgrep-args (s-concat consult-ripgrep-args " --hidden")))
      (call-interactively 'consult-ripgrep)))

  (add-hook 'minibuffer-setup-hook
            (lambda ()
              (local-set-key (kbd "M-r") #'consult-history)))

  :bind
  ("C-S-Y"     . consult-yank-from-kill-ring)
  ;; M-s `search-map'
  ("M-s d"     . consult-fd)
  ("M-s l"     . consult-line)
  ("M-s L"     . consult-line-multi)
  ("M-s r"     . consult-ripgrep)
  ("M-s R"     . darius/consult-ripgrep-hidden)
  ("M-s u"     . consult-focus-lines)
  ("M-s k"     . consult-keep-lines)
  ;; M-g `goto-map'
  ("M-g g"     . consult-goto-line)
  ("M-g M-g"   . consult-goto-line)
  ("M-g e"     . consult-compile-error)
  ("M-g f"     . consult-flymake)
  ("M-g o"     . consult-outline)
  ("M-g m"     . consult-mark)
  ("M-g k"     . consult-global-mark)
  ("M-g i"     . consult-imenu)
  ("M-g I"     . consult-imenu-multi))
#+end_src

** PDF Tools
Some improvements over DocView

#+begin_src emacs-lisp
(use-package pdf-tools
  :init
  (pdf-loader-install)
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (add-to-list 'revert-without-query ".pdf")
  (setopt pdf-view-continuous nil) ;; don't auto-switch to the next/previous page when scrolling
  (setopt pdf-annot-default-annotation-properties '((t (label . "Darius Schefer")) (text (icon . "Comment"))))
  (setopt pdf-view-use-scaling t)
  (setopt pdf-view-resize-factor 1.1)
  :bind (:map pdf-view-mode-map
              ("C" . pdf-view-center-in-window)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink)
              ;; this also makes scroll-other-window work for PDFView buffers
              ([remap scroll-up-command] . pdf-view-scroll-up-or-next-page)
              ([remap scroll-down-command] . pdf-view-scroll-down-or-previous-page)
              ("<mouse-8>" . pdf-view-scroll-down-or-previous-page)
              ("<mouse-9>" . pdf-view-scroll-up-or-next-page)
              ("M-g g" . pdf-view-goto-page)))

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
(add-hook 'doc-view-mode-hook #'(lambda () (progn
                                             (pdf-tools-install)
                                             (pdf-view-mode))))
#+end_src

** Org
Some org-mode tweaks

#+begin_src emacs-lisp
(defun darius/org-setup ()
  (setopt org-directory "~/Notes")
  (setopt org-default-notes-file (concat org-directory "/captures.org"))
  (setopt org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Notes/index.org" "Stuff")
             "* %?\n  %i\n")
            ("T" "Todo [with context]" entry (file+headline "~/Notes/index.org" "Stuff")
             "* %?\n  %i\n  %a\n")
            ("k" "KITcar" entry (file+headline "~/Notes/kitcar.org" "Stuff")
             "* %?\n  %i \n%U\n")
            ("K" "KITcar [with context]" entry (file+headline "~/Notes/kitcar.org" "Stuff")
             "* %?\n  %i \n%U\n %a\n")))
  (setopt org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 3)))
  (setopt org-agenda-span 'month)
  (setopt org-agenda-files '("~/Notes"))
  (setopt org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|" "DONE(d)")))
  (setopt org-use-fast-todo-selection 'expert)
  (setopt org-return-follows-link t)
  (setopt org-src-window-setup 'plain)
  (setopt calendar-date-style 'european)
  (setopt calendar-week-start-day 1)
  (setopt org-imenu-depth 7)
  (setopt org-highlight-latex-and-related '(latex))
  (setopt org-hide-emphasis-markers t)    ; I will probably regret this?
  (setopt org-M-RET-may-split-line '((default . nil)))
  (setopt org-bookmark-nammes-plist nil) ;; stop org-capture from creating bookmarks
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file))

(use-package org
  :config
  (darius/org-setup)
  (setopt org-src-preserve-indentation nil
          org-edit-src-content-indentation 0))

;; For some reason there is an error if I set this using use-package's :hook inside the org block
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

;; Timer
(setq darius/timer-running nil)
(add-hook 'org-timer-start-hook '(lambda () (setq darius/timer-running t)))
(add-hook 'org-timer-stop-hook '(lambda () (setq darius/timer-running nil)))
(defun darius/org-timer-toggle ()
  (interactive)
  (if darius/timer-running
      (org-timer-stop)
    (org-timer-start)))

;; Global keymaps
(setq darius/global-org-keymap (make-sparse-keymap))
(define-key global-map (kbd "C-c o") darius/global-org-keymap)
(define-key darius/global-org-keymap (kbd "a") 'org-agenda)
(define-key darius/global-org-keymap (kbd "g") 'consult-org-agenda)
(define-key darius/global-org-keymap (kbd "c") 'org-capture)
(define-key darius/global-org-keymap (kbd "t") 'darius/org-timer-toggle)

;; Org-specific maps
(setq darius/local-org-keymap (make-sparse-keymap))
(define-key org-mode-map (kbd "C-c o") darius/local-org-keymap)
(define-key darius/local-org-keymap (kbd "h") 'consult-org-heading)
(define-key darius/local-org-keymap (kbd "s") 'org-store-link)

;; Fix weird internal link behavior
(with-eval-after-load 'org-ctags (setopt org-open-link-functions nil))

(use-package org-latex-preview
  :after org-mode                       ; this is org-mode, not org with the custom build for latex preview
  :ensure nil
  :config
  (setopt org-latex-preview-live t)
  (plist-put org-latex-preview-appearance-options :page-width 1.0)
  (plist-put org-latex-preview-appearance-options :scale 2.5)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode))

;; Show emphasis markers like ** and some other things when point is inside them
(use-package org-appear
  :custom
  (org-appear-autoemphasis t)
  (org-appear-autoentities t)
  (org-appear-autosubmarkers t)
  (org-appear-inside-latex t)
  :hook (org-mode . org-appear-mode))
#+end_src

** Spell checking
Ispell is slow

#+begin_src emacs-lisp
(use-package jinx
  :config
  (dolist (hook '(text-mode-hook LaTex-mode-hook))
    (add-hook hook #'jinx-mode))
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages))
  :custom
  (add-hook 'org-mode-hook #'(lambda () (jinx-mode 0))))
#+end_src

** Completion at point
Corfu for in-buffer completion

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-auto-delay 0.1)
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 3)
  (corfu-separator ?\s)
  (corfu-preview-current 'insert)
  (corfu-on-exact-match nil)
  (corfu-popupinfo-mode t)
  (corfu-popupinfo-delay '(nil . 0.0))
  (global-corfu-minibuffers t)

  :config
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (pcase completion-in-region--data
      (`(,beg ,end ,table ,pred ,extras)
       (let ((completion-extra-properties extras)
             completion-cycle-threshold completion-cycling)
         (consult-completion-in-region beg end table pred)))))
  (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)

  ;; Stop stealing my keybinds you weirdo
  :bind
  (:map corfu-map
        ("RET" . nil)
        ([remap move-beginning-of-line] . nil)
        ([remap move-end-of-line] . nil)
        ([remap next-line] . nil)
        ([remap previous-line] . nil)
        ("M-m" . 'corfu-move-to-minibuffer))

  :init (global-corfu-mode))

;; Enable indentation+completion using the TAB key.
;; `completion-at-point' is often bound to M-TAB.
(setopt tab-always-indent 'complete)

(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file))
#+end_src

** Minibuffer completion
Set up vertico, orderless and savehist and tweak some emacs completion defaults

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("DEL" . vertico-directory-delete-char)
              ("C-DEL" . vertico-directory-up)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package orderless
  :init
  (setopt completion-styles '(substring orderless basic)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))

(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		          (replace-regexp-in-string
		           "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		           crm-separator)
		          (car args))
	      (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setopt minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

(use-package savehist
  :init (savehist-mode))
#+end_src

** Colorscheme
The most important thing tbh.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 98)) ; a little transparency

(defun darius/fix-terminal-transparency ()
  "Removes theme background color in terminal windows"
  (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))
(add-hook 'window-setup-hook 'darius/fix-terminal-transparency)

(defun darius/catppuccin-setup-light ()
  (interactive)
  (mapc #'disable-theme custom-enabled-themes)
  (catppuccin-load-flavor 'latte)
  (darius/catppuccin-face-setup))

(defun darius/catppuccin-setup-dark ()
  (interactive)
  (mapc #'disable-theme custom-enabled-themes)
  (catppuccin-load-flavor 'mocha)
  (darius/catppuccin-face-setup))

(defun darius/catppuccin-face-setup ()
  (set-face-attribute 'line-number nil :foreground (catppuccin-color 'overlay0))
  (set-face-attribute 'org-block nil :foreground (catppuccin-color 'text))
  (require 'font-latex) ;; otherwise there is a face not found error
  (set-face-attribute 'font-latex-sectioning-5-face nil :foreground (catppuccin-color 'red)))

(use-package catppuccin-theme
  :config (darius/catppuccin-setup-dark))
#+end_src

** Windows and Frames
Switching and moving windows

#+begin_src emacs-lisp
(use-package ace-window
  :bind (("M-O" . ace-swap-window))
  :custom
  (aw-scope 'frame))

(global-set-key (kbd "M-H") 'windmove-left)
(global-set-key (kbd "M-J") 'windmove-down)
(global-set-key (kbd "M-K") 'windmove-up)
(global-set-key (kbd "M-L") 'windmove-right)
#+end_src

** Diminish
Get rid of some clutter in the modeline
Doesn't work properly if it's not all the way at the end for some reason

#+begin_src emacs-lisp
(use-package diminish
  :diminish visual-line-mode
  :diminish auto-revert-mode
  :diminish org-cdlatex-mode)
#+end_src

** Org Presentations
Simple presentations from org-mode buffers

#+begin_src emacs-lisp
(use-package visual-fill-column
  :custom
  (visual-fill-column-center-text t)
  (visual-fill-column-width 110))

(use-package org-present
  :after visual-fill-column
  :config
  (defun darius/org-present-start ()
    (visual-fill-column-mode 1)
    (read-only-mode 1))
  (defun darius/org-present-end ()
    (visual-fill-column-mode 0)
    (read-only-mode 0))
  ;; this doesn't work with :hook for some reason
  :hook ((org-present-mode . darius/org-present-start)
         (org-present-mode-quit . darius/org-present-end)))
#+end_src

* Languages
Programming language specific stuff
** Treesitter
Automatically install tree-sitter grammars and enable the major modes

#+begin_src emacs-lisp
;; (setopt treesit-font-lock-level 3)        ; 4 is a little much
(setopt treesit-font-lock-level 4)

(use-package treesit-auto
  :after emacs ;; idk if this is really necessary
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** Eglot Setup
Language server stuff

#+begin_src emacs-lisp
(use-package eglot
  :custom
  (eglot-events-buffer-size 0)
  (eglot-ignored-server-capabilities '(:documentHighlightProvider))
  (eglot-autoshutdown t)
  (eglot-extend-to-xref t)
  :config
  (fset #'jsonrpc--log-event #'ignore)
  (add-to-list 'eglot-server-programs
               `((scala-mode scala-ts-mode)
                 . ,(alist-get 'scala-mode eglot-server-programs)))
  (add-to-list 'eglot-server-programs
               '((c-mode c++-mode c-ts-mode c++-ts-mode)
                 . ("clangd"
                    "-j=16"
                    "--log=error"
                    "--malloc-trim"
                    "--background-index"
                    "--clang-tidy"
                    "--cross-file-rename"
                    "--completion-style=detailed"
                    "--pch-storage=memory"
                    "--header-insertion=never"
                    "--header-insertion-decorators=0"))) ; I hope this does what I want it to
  :hook (LaTeX-mode . eglot-ensure))
#+end_src

** Hyprlang
Hyprland ecosystem config language
Uses the builtin treesit
Get the [[https://github.com/tree-sitter-grammars/tree-sitter-hyprlang][language grammar here]]

#+begin_src emacs-lisp
(use-package hyprlang-ts-mode
  :custom (hyprlang-ts-mode-indent-offset 4))
#+end_src

** C and C++

#+begin_src emacs-lisp
;; (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
;; (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
;; (add-to-list 'major-mode-remap-alist
;;              '(c-or-c++-mode . c-or-c++-ts-mode))
#+end_src

** Rust
Funny orange crab

#+begin_src emacs-lisp
(let ((cargo-path (expand-file-name "~/.cargo/bin")))
  (setenv "PATH" (concat cargo-path ":" (getenv "PATH")))
  (add-to-list 'exec-path cargo-path))

(use-package rust-mode)
#+end_src

** Haskell
The one and only

#+begin_src emacs-lisp
(use-package haskell-mode
  :after haskell-interactive-mode
  :init
  (setopt flymake-allowed-file-name-masks '())
  :config
  (let ((my-ghcup-path (expand-file-name "~/.ghcup/bin")))
    (setenv "PATH" (concat my-ghcup-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-ghcup-path))
  (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
    (setenv "PATH" (concat my-cabal-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-cabal-path))

  (require 'inf-haskell)                ; TODO there probably is a better way to do this than requiring it here
  (defun darius/haskell-interactive-beginning-of-line ()
    "Skip the interactive haskell prompt at the beginning of the line"
    (interactive)
    (let* ((line (thing-at-point 'line t))
           (pos (string-match haskell-prompt-regexp line))
           (end (if pos (match-end 0) 0)))
      (beginning-of-line)
      (forward-char end)))

  :bind
  (:map haskell-mode-map
        ("M-n" . 'haskell-goto-next-error)
        ("M-p" . 'haskell-goto-prev-error)
        :map haskell-interactive-mode-map
        ("C-a" . 'darius/haskell-interactive-beginning-of-line)))

(use-package hindent
  :after haskell-mode
  :hook (haskell-mode . hindent-mode)
  :diminish)
#+end_src

** Scala
why

This assumes metals is installed in ~./local/bin/metals-emacs~.

#+begin_src emacs-lisp
(let ((coursier-bin-path "/home/darius/.local/share/coursier/bin/"))
  (use-package scala-mode
    :interpreter ("scala" . scala-mode)
    :init
    (add-to-list 'exec-path coursier-bin-path)
    (setenv "PATH" (concat coursier-bin-path ":" (getenv "PATH")))
    :bind (:map scala-mode-map
                ("C-c c" . scala-compile)
                ("C-c r" . scala-compile))))

(use-package scala-ts-mode)
#+end_src

** OCaml
Assumes the ~merlin~, ~dune~, and ~tuareg~ packages are installed in the current opam switch

#+begin_src emacs-lisp
(let ((opam-bin-path (ignore-errors (car (process-lines "opam" "var" "bin")))))
  (setenv "PATH" (concat opam-bin-path ":" (getenv "PATH")))
  (add-to-list 'exec-path opam-bin-path))

(use-package tuareg)
(use-package dune)

(use-package merlin
  :config
  (add-hook 'tuareg-mode-hook #'merlin-mode)
  (add-hook 'caml-mode-hook #'merlin-mode))

(use-package opam-switch-mode
  :hook ((coq-mode tuareg-mode) . opam-switch-mode))
#+end_src

** Zig
🦎

#+begin_src emacs-lisp
(let ((zig-path (expand-file-name "/opt/zig/")))
  (setenv "PATH" (concat zig-path ":" (getenv "PATH")))
  (add-to-list 'exec-path zig-path))

(use-package zig-mode)
#+end_src

** COMMENT Z3
SMT solving aaaa
For some reason this depends on flycheck which is very cringe

#+begin_src emacs-lisp
(use-package z3-mode
  :mode "\\.smt\\'")
#+end_src

** Proof General
Coqqq

#+begin_src emacs-lisp
(use-package proof-general
  :hook (coq-mode . prettify-symbols-mode))
#+end_src

** COMMENT Agda
Load this after the ghc path is set

#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
             (shell-command-to-string "agda-mode locate")))
#+end_src

** COMMENT Clojure
I guess?

#+begin_src emacs-lisp
(use-package cider
  :hook (clojure-mode . cider-mode))
#+end_src

** Python
Support for virtual environments

#+begin_src emacs-lisp
(use-package pyvenv)
#+end_src

** COMMENT Lua
🇧🇷

#+begin_src emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-level 2)
  (lua-indent-nested-block-content-align nil))
#+end_src

** Markdown
Syntax highlighting and other stuff for markdown documents.
GFM mode seems to work better than markdown-ts-mode for me.

#+begin_src emacs-lisp
(use-package markdown-mode
  :custom (markdown-fontify-code-blocks-natively t)
  :mode
  ("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . gfm-mode))
#+end_src

** Nix
❄

#+begin_src emacs-lisp
(use-package nix-ts-mode
  :mode ("\\.nix\\'" . nix-ts-mode))
#+end_src

** LaTeX and Citar
Work with citations
Also requires auctex

~citar-open-entry-in-zotero~ relies on the BetterBibTex plugin for Zotero
#+begin_src emacs-lisp
(defun darius/LaTeX-mode-setup ()
  (progn
    (add-to-list 'TeX-view-program-selection '(output-pdf "PDF Tools"))
    (add-to-list 'reftex-ref-style-default-list "Hyperref")
    (TeX-source-correlate-mode t)
    (define-key LaTeX-mode-map (kbd "C-c C-r") 'reftex-reference)
    (font-latex-add-keywords '(("autoref" "*{") ("Autoref" "{")) 'reference)))

(use-package tex
  :ensure auctex
  :config
  (setopt TeX-parse-self t)
  (setopt TeX-auto-save t)
  (setopt LaTeX-electric-left-right-brace t)
  (setopt reftex-plug-into-AUCTeX t)
  (setopt reftex-default-bibliography '("~/Documents/library.bib"))
  (setq-default TeX-master 'shared)
  (setq-default TeX-command-extra-options "--shell-escape")
  :hook
  (LaTeX-mode . hl-line-mode)
  (LaTeX-mode . darius/LaTeX-mode-setup)
  (LaTeX-mode . turn-on-reftex))

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

(use-package citar
  :config
  (defun darius/open-in-zotero (citekey)
    "Open a reference item in Zotero."
    (interactive (list (citar-select-ref)))
    (citar-open-entry-in-zotero citekey))
  :custom
  (citar-file-open-functions '(("html" . citar-file-open-external) ("pdf" . citar-file-open-external) (t . find-file)))
  (org-cite-global-bibliography '("~/Documents/library.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup)
  :bind ("C-c z" . 'citar-insert-citation)
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

(use-package citar-embark
  :after citar embark
  :diminish
  :custom (citar-at-point-function 'embark-act)
  :config
  (citar-embark-mode)
  (define-key citar-embark-map (kbd "z") #'citar-open-entry-in-zotero)
  (define-key citar-citation-map (kbd "z") #'citar-open-entry-in-zotero))

(use-package cdlatex
  :custom (cdlatex-takeover-parenthesis nil)
  :hook (LaTeX-mode . turn-on-cdlatex))
#+end_src

** Typst
The cooler LaTeX?

#+begin_src emacs-lisp
(use-package typst-ts-mode
  :after eglot
  :config
  ;; typst-ts-mode downloads the latest stable build of tinymist (https://myriad-dreamin.github.io/tinymist/frontend/emacs.html)
  ;; so use that if it's available
  (add-to-list 'eglot-server-programs
               `((typst-ts-mode) .
                 ,(eglot-alternatives
                   `(,typst-ts-lsp-download-path
                     "tinymist")))))
#+end_src

** SAIL
Sail architecture definition language
See [[https://github.com/rems-project/sail][GitHub]]
Requires ~sail-mode.el~ somewhere in the load-path

#+begin_src emacs-lisp
(require 'sail-mode)
(add-hook 'sail-mode-hook #'font-lock-update) ; Syntax doesn't update on its own for some reason
(add-hook 'sail-mode-hook #'display-line-numbers-mode)
(add-hook 'sail-mode-hook #'(lambda () (setq-local tab-width 2)))
#+end_src

** Web-mode
Web stuff

#+begin_src emacs-lisp
(use-package web-mode
  :custom
  (web-mode-auto-close-style 2) ;; auto-close tags on '>'
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-enable-auto-expanding t)
  (web-mode-enable-comment-annotation t)
  :mode (("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)))
#+end_src

* Custom Functions
Various cringe
** COMMENT Todo comments
Prompt for a string and insert a command with that string.

~hl-todo~ seems to have something similar called ~hl-todo-occur~

#+begin_src emacs-lisp
(setq darius/comment-keyword-list
      '(("TODO") ("FIXME") ("NOTE") ("OPTIMIZE") ("HACK") ("BUG")))

(defun darius/todo-occur ()
  "List all lines containing a keyword from `darius/comment-keyword-list'"
  (interactive)
  (let ((keyword (completing-read "Occur keyword: " darius/comment-keyword-list)))
    (occur keyword)))
#+end_src

** Zoxide
Querying the zoxide database for all entries returns them in a sorted order, so we can just pass it to completing read.
The ~table~ thing makes completing-read keep the original order of the list passed to it.

#+begin_src emacs-lisp
(defun darius/zoxide-find-file ()
  "Find a file from your zoxide database"
  (interactive)
  (let* ((db (shell-command-to-string "zoxide query -l"))
         (entries (split-string db "\n" t))
         (table (lambda (string pred action)
                  (if (eq action 'metadata)
                      `(metadata (display-sort-function . identity))
                    (complete-with-action action entries string pred))))
         (selection (completing-read "Jump: " table nil t)))
    (find-file selection)))

(global-set-key (kbd "M-g z") 'darius/zoxide-find-file)
#+end_src
