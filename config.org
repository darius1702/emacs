#+TITLE: Emacs configuration
#+AUTHOR: Darius Schefer
#+PROPERTY: header-args:emacs-lisp :tangle init.el :mkdirp yes
#+STARTUP: show2levels

* Early init
** No premature redisplay
Prevent some flickering on startup
(Doesn't really prevent any flickering)

#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t -*-
(setq-default inhibit-redisplay t
              inhibit-message t)
(add-hook 'window-setup-hook
          (lambda ()
            (setq-default inhibit-redisplay nil
                          inhibit-message nil)
            (redisplay)))
#+end_src

** Faster startup
Change some variables until after startup to make emacs load faster

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold (eval-when-compile (* 5 1024 1024 1024)))

(defvar darius/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defvar darius/vc-handled-backends vc-handled-backends)
(setq vc-handled-backends nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist darius/file-name-handler-alist
                  vc-handled-backends     darius/vc-handled-backends)))
#+end_src

** Default clutter
Adjust some default settings

#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-message t)
(setq native-comp-async-report-warnings-errors nil)
(setq initial-scratch-message "")
(setq server-client-instructions nil)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(blink-cursor-mode 0)
(setq frame-resize-pixelwise t)
(setq use-dialog-box nil)
(setq use-short-answers t)
(winner-mode t)                         ; window layout history
(undelete-frame-mode t)
#+end_src

* Basic stuff
** Annoying files
Disble all annoying auto-generated files and make ~custom-set-variables~ go to their own file

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setq backup-by-copying t)

;; Enable when lockfiles become annoying
;; (setq create-lockfiles nil)

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Better editing experience
Some sensible defaults

#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c"))            ; stop accidentally quitting emacs
(global-unset-key (kbd "C-x C-z"))            ; stop accidentally suspending emacs
(global-unset-key (kbd "C-z"))                ; stop accidentally suspending emacs (other binding)

(global-set-key (kbd "C-z") 'grep-find)   ; something more useful

(global-set-key (kbd "C-c c") 'compile)
(global-set-key (kbd "C-c r") 'recompile)

(global-set-key (kbd "M-o") 'other-window)

;; Act on region if active, otherwise on line
(global-set-key (kbd "M-D") 'duplicate-dwim)

;; Act on region if active, otherwise on word
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)

(global-set-key (kbd "M-n") 'flymake-goto-next-error)
(global-set-key (kbd "M-p") 'flymake-goto-prev-error)

(global-set-key (kbd "M-N") 'next-error)
(global-set-key (kbd "M-P") 'previous-error)

(global-unset-key (kbd "C-<wheel-up>"))
(global-unset-key (kbd "C-<wheel-down>"))
(global-unset-key (kbd "<pinch>"))

(run-with-idle-timer 2 t (lambda () (garbage-collect)))

(setq suggest-key-bindings nil
      echo-keystrokes 0.01)

(setq read-buffer-completion-ignore-case t
      read-file-name-completion-ignore-case t
      completion-ignore-case t)

(setq comint-prompt-read-only t)

(setq scroll-conservatively 101)
(pixel-scroll-precision-mode 1)

(setq display-line-numbers-type 'relative
      display-line-numbers-width 3
      display-line-numbers-grow-only t)
(setq text-scale-mode-step 1.05)

(setq-default indent-tabs-mode nil)
(add-to-list 'write-file-functions 'delete-trailing-whitespace)

(setq sentence-end-double-space nil
      sentence-end "[.\",;!?*:'] ")

(setq ispell-dictionary "en_US"
      ispell-program-name "hunspell"
      isearch-wrap-pause 'no-ding)

(setq tab-bar-show 1)                   ; only show tab bar on frames with more than one tab
(column-number-mode t)
(show-paren-mode t)
(setq show-paren-when-point-inside-paren t)
(global-visual-line-mode t)
(electric-pair-mode t)
#+end_src

** Prog-mode setup
Make programming-modes a little nicer with line numbers and current line highlighting

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Man pages
Make manpages look a little better

#+begin_src emacs-lisp
(use-package man
  :ensure nil
  :bind ("C-c m" . 'man))
#+end_src

** Ibuffer
Buffer switching and management

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-expert t)
(setq ibuffer-display-summary nil)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("Code" (or (derived-mode . prog-mode) (mode . ess-mode)
                           (mode . compilation-mode)))
               ("LaTeX" (mode . latex-mode))
               ("Dired" (mode . dired-mode))
               ("Org" (mode . org-mode))
               ("Pdf" (mode . pdf-view-mode))
               ("Help" (or (mode . help-mode) (mode . Man-mode)))
               ("Git" (name . "^magit"))
               ("Misc" (name . "^\\**.*\\*$"))))))

(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              (vc-status 16 16 :left))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")
            (ibuffer-auto-mode t)))
#+end_src

** Dired
Make dired recognize other buffers as copy/move targets and also list human-readable filesizes

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-dwim-target- 1)
  (dired-listing-switches "-alh")
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-auto-revert-buffer t)
  :config
  ;; Make `dired-do-shell-command' suggest better defaults for some filetypes
  (add-to-list 'dired-guess-shell-alist-user '("\\.pdf\\'" "zathura"))
  (add-to-list 'dired-guess-shell-alist-user '("\\.mp4\\'" "mpv")))
#+end_src

** Proced
Interact with running processes

#+begin_src emacs-lisp
(use-package proced
  :ensure nil
  :commands proced
  :custom
  (proced-auto-update-flag t)
  (proced-goal-attribute nil)
  (proced-enable-color-flag t)
  (proced-format 'custom)
  :config
  (add-to-list 'proced-format-alist
               '(custom user pid ppid sess tree pcpu pmem rss start time state (args comm))))
#+end_src

** Default Applications
Default programs for opening filetypes
This is probably he wrong way to do it?

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)))
#+end_src

** Font setup
Need to set it in an extra hook to make it work in emacsclient frames.

#+begin_src emacs-lisp
(setq darius/fixed-pitch-font "IosevkaTerm NFP")
(setq darius/variable-pitch-font "IosevkaTerm NFP")

(defun darius/set-up-fonts ()
  (set-face-attribute 'default nil :font darius/fixed-pitch-font :height 130)
  (set-face-attribute 'variable-pitch nil :font  darius/variable-pitch-font :weight 'regular)
  (set-face-attribute 'fixed-pitch nil :font darius/fixed-pitch-font))

(add-hook 'after-init-hook 'darius/set-up-fonts)
(add-hook 'server-after-make-frame-hook 'darius/set-up-fonts)
#+end_src

* Packages
** Setup
Basic ~package.el~ config

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq package-native-compile t)         ; this will just be ignored if native-comp isn't available
#+end_src

** Useful random stuff
Some packages that don't require much configuration

*** Editorconfig
Load  ~.editorconfig~ files

#+begin_src emacs-lisp
(use-package editorconfig
  :diminish
  :config (editorconfig-mode 1))
#+end_src

*** Ibuffer-vc
Version control integration for Ibuffer

#+begin_src emacs-lisp
(use-package ibuffer-vc)
#+end_src

*** Marginalia
Usful info in the minibuffer

#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

*** Rainbow-mode
Colorize strings like #a7c080

#+begin_src emacs-lisp
(use-package rainbow-mode
  :config (rainbow-mode)
  :diminish rainbow-mode)
#+end_src

*** hl-todo
Highlight keywords like TODO and FIXME in comments in source code

#+begin_src emacs-lisp
(use-package hl-todo
  :bind ("M-s t" . hl-todo-occur)
  :hook (prog-mode . hl-todo-mode))
#+end_src

*** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode)
#+end_src

*** Expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))
#+end_src

*** Multiple cursors
Easily place multiple cursors for edits

#+begin_src emacs-lisp
(use-package multiple-cursors
  :custom ((mc/always-run-for-all t)
           (mc/cmds-to-run-once nil))

  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this-word)
         ("C-<" . mc/mark-previous-like-this-word)
         ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

*** TLDR pages
Read tldr pages in emacs

#+begin_src emacs-lisp
(use-package tldr
  :bind ("C-c t" . tldr))
#+end_src

*** Nov mode
Read epubs in emacs

#+begin_src emacs-lisp
(use-package nov
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

*** PDFgrep mode
Grep in pdfs

#+begin_src emacs-lisp
(use-package pdfgrep
  :config (pdfgrep-mode))
#+end_src

*** Embark
Very cool
Still not 100% sure I get what it does

#+begin_src emacs-lisp
(use-package embark
  :bind ("C-." . embark-act))

(use-package embark-consult)
#+end_src

*** CSV-mode
Prettier csv files

#+begin_src emacs-lisp
(use-package csv-mode
  :hook (csv-mode . csv-align-mode))
#+end_src

*** Markdown mode
Syntax highlighting and other stuff for markdown documents

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode))
#+end_src

*** TMR
Set timers

#+begin_src emacs-lisp
(use-package tmr
  :custom
  (tmr-sound-file nil))
#+end_src

*** Sudoedit
Sudoedit files a little nicer than the built-in /sudoedit::

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

*** Casual Calc
Make calc a lot easier to work with

#+begin_src emacs-lisp
(use-package casual
  :bind (:map calc-mode-map ("C-o" .  #'casual-calc-tmenu)))
#+end_src

** Git
Some git tools

*** Magit
Very nice git interface

#+begin_src emacs-lisp
(use-package magit)
#+end_src

*** Git-Gutter
Git status in the gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :diminish
  :init
  (setq
   git-gutter:update-interval 0
   git-gutter:modified-sign "│"
   git-gutter:added-sign "│"
   git-gutter:deleted-sign "│")
  :config
  (set-face-foreground 'git-gutter:modified "#7fbbb3")
  :hook (prog-mode . git-gutter-mode))
#+end_src

** Consult
Some nice additional completing-read stuff

#+begin_src emacs-lisp
(use-package consult
  :bind
  ("C-S-Y"     . consult-yank-from-kill-ring)
  ;; M-s `search-map'
  ("M-s d"     . consult-fd)
  ("M-s l"     . consult-line)
  ("M-s L"     . consult-line-multi)
  ("M-s r"     . consult-ripgrep)
  ("M-s u"     . consult-focus-lines)
  ("M-s k"     . consult-keep-lines)
  ;; M-g `goto-map'
  ("M-g g"     . consult-goto-line)
  ("M-g M-g"   . consult-goto-line)
  ("M-g e"     . consult-compile-error)
  ("M-g f"     . consult-flymake)
  ("M-g o"     . consult-outline)
  ("M-g m"     . consult-mark)
  ("M-g k"     . consult-global-mark)
  ("M-g i"     . consult-imenu)
  ("M-g I"     . consult-imenu-multi))
#+end_src

** PDF Tools
Some improvements over DocView

#+begin_src emacs-lisp
(use-package pdf-tools
  :init
  (pdf-tools-install)
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (add-to-list 'revert-without-query ".pdf")
  (setq pdf-annot-default-annotation-properties '((t (label . "Darius Schefer")) (text (icon . "Comment"))))
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink)))

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
(add-hook 'doc-view-mode-hook #'(lambda () (progn
                                             (pdf-tools-install)
                                             (pdf-view-mode))))
#+end_src

** Org
Some org-mode tweaks

#+begin_src emacs-lisp
(defun darius/org-setup ()
  (setq org-directory "~/Notes")
  (setq org-default-notes-file (concat org-directory "/captures.org"))
  (setq org-refile-targets
        '((nil :maxlevel . 3)
          (org-agenda-files :maxlevel . 3)))
  (setq org-agenda-span 'month)
  (setq org-agenda-files '("~/Notes"))
  (setq org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|" "DONE(d)")))
  (setq org-return-follows-link t)
  (setq calendar-date-style 'european)
  (setq calendar-week-start-day 1)
  (setq org-imenu-depth 7)
  (setq org-M-RET-may-split-line '((default . nil)))
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file))

(use-package org
  :config
  (darius/org-setup)
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))

;; For some reason there is an error if I set this using use-package's :hook inside the org block
(add-hook 'org-mode-hook 'org-indent-mode)

;; Timer
(setq darius/timer-running nil)
(add-hook 'org-timer-start-hook '(lambda () (setq darius/timer-running t)))
(add-hook 'org-timer-stop-hook '(lambda () (setq darius/timer-running nil)))
(defun darius/org-timer-toggle ()
  (interactive)
  (if darius/timer-running
      (org-timer-stop)
    (org-timer-start)))

;; Global keymaps
(setq darius/global-org-keymap (make-sparse-keymap))
(define-key global-map (kbd "C-c o") darius/global-org-keymap)
(define-key darius/global-org-keymap (kbd "a") 'org-agenda)
(define-key darius/global-org-keymap (kbd "g") 'consult-org-agenda)
(define-key darius/global-org-keymap (kbd "c") 'org-capture)
(define-key darius/global-org-keymap (kbd "t") 'darius/org-timer-toggle)

;; Org-specific maps
(setq darius/local-org-keymap (make-sparse-keymap))
(define-key org-mode-map (kbd "C-c o") darius/local-org-keymap)
(define-key darius/local-org-keymap (kbd "h") 'consult-org-heading)
(define-key darius/local-org-keymap (kbd "s") 'org-store-link)

;; Fix weird internal link behavior
(with-eval-after-load 'org-ctags (setq org-open-link-functions nil))
#+end_src

** Completion at point
Corfu for in-buffer completion

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 3)
  ;; (corfu-auto-delay 0.5)
  (corfu-separator ?\s)             ;; Orderless field separator
  (corfu-popupinfo-mode t)
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  :bind
  (:map corfu-map
        ("RET" . nil))

  :init (global-corfu-mode))

;; Enable corfu in minibuffer for M-: etc
(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer."
  (when (local-variable-p 'completion-at-point-functions)
    ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  ;; (setq completion-cycle-threshold nil)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src

** Minibuffer completion
Set up vertico, orderless and savehist and tweak some emacs completion defaults

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(substring orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package savehist
  :init (savehist-mode))
#+end_src

** Colorscheme
The most important thing tbh.

#+begin_src emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-mixed-fonts t)
  (modus-themes-bold-constructs t)
  (modus-themes-prompts '(bold))
  (modus-themes-to-toggle '(modus-operandi modus-vivendi-tinted))
  (modus-themes-common-palette-overrides
   '((border-mode-line-active unspecified)
     (border-mode-line-inactive unspecified)
     (fg-region unspecified)
     (fringe unspecified)
     (bg-line-number-active unspecified)))
  (modus-themes-headings
   '((1 . (1.2))
     (2 . (1.15))
     (3 . (1.1))))
  :bind
  ("<f12>" . modus-themes-toggle))

(modus-themes-select 'modus-vivendi-tinted)
#+end_src

** Diminish
Get rid of some clutter in the modeline
Doesn't work properly if it's not all the way at the end for some reason

#+begin_src emacs-lisp
(use-package diminish
  :diminish visual-line-mode
  :diminish auto-revert-mode)
#+end_src

** Windows and Frames
Switching and moving windows

#+begin_src emacs-lisp
(use-package ace-window
  :bind (("M-O" . ace-swap-window))
  :custom
  (aw-scope 'frame))

(use-package transpose-frame
  :bind ("C-M-o" . transpose-frame))

(global-set-key (kbd "M-H") 'windmove-left)
(global-set-key (kbd "M-J") 'windmove-down)
(global-set-key (kbd "M-K") 'windmove-up)
(global-set-key (kbd "M-L") 'windmove-right)
#+end_src

** COMMENT Evil mode
Noooo

#+begin_src emacs-lisp :tangle early-init.el
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll t)
#+end_src


#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-set-undo-system 'undo-redo)
  (setq evil-mode-line-format nil)
  (dolist (mode '(dired-mode image-mode vterm-mode nov-mode pdf-annot-list-mode xref--xref-buffer-mode))
    (evil-set-initial-state mode 'emacs))
  (evil-mode 1))

(use-package evil-commentary
  :after evil
  :diminish
  :config (evil-commentary-mode))

(use-package evil-surround
  :config (global-evil-surround-mode))

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
  (define-key evil-motion-state-map (kbd "C-.") 'embark-act)
  (define-key evil-normal-state-map (kbd "C-.") 'embark-act)
  (define-key evil-normal-state-map (kbd "C-n") nil)
  (define-key evil-normal-state-map (kbd "C-p") nil)
  (define-key evil-insert-state-map (kbd "C-n") nil)
  (define-key evil-insert-state-map (kbd "C-p") nil)
  (define-key evil-normal-state-map (kbd "M-.") 'xref-find-definitions)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

(use-package evil-escape
  :custom (evil-escape-key-sequence "jk")
  :config (evil-escape-mode)
  :diminish)
#+end_src

** Avy
Jumping around

#+begin_src emacs-lisp
(use-package avy
  :bind ("M-j" . avy-goto-char-timer))
#+end_src

** Eldoc-Box
Eldoc in a popup frame

#+begin_src emacs-lisp
(setq eldoc-echo-area-use-multiline-p nil)
(use-package eldoc-box
  :bind ("C-c k" . #'eldoc-box-help-at-point))
#+end_src

* Languages
Programming language specific stuff

** Tree-sitter
General tree-sitter setup

#+begin_src emacs-lisp
(setq treesit-font-lock-level 4)

(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
(add-to-list 'org-src-lang-modes '("yaml" . yaml-ts))
;; (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
;; (add-to-list 'org-src-lang-modes '("json" . json-ts))

(setq treesit-language-source-alist
      '((bash "https://github.com/tree-sitter/tree-sitter-bash")
        (cmake "https://github.com/uyha/tree-sitter-cmake")
        (c "https://github.com/tree-sitter/tree-sitter-c")
        (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (make "https://github.com/alemuller/tree-sitter-make")
        (markdown "https://github.com/ikatyang/tree-sitter-markdown")
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (toml "https://github.com/tree-sitter/tree-sitter-toml")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
        (nix "https://github.com/nix-community/tree-sitter-nix" "master" "src")
        (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

(defun darius/install-ts-grammars ()
  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist)))
#+end_src

** Eglot Setup
Language server stuff

#+begin_src emacs-lisp
(use-package eglot
  :custom
  (eglot-events-buffer-size 0)
  (eglot-ignored-server-capabilities '(:documentHighlightProvider))
  (eglot-autoshutdown t)
  (eglot-extend-to-xref t)
  :config
  (fset #'jsonrpc--log-event #'ignore)
  (add-to-list 'eglot-server-programs
               '((c-mode c++-mode c-ts-mode c++-ts-mode)
                 . ("clangd"
                    "-j=16"
                    "--log=error"
                    "--malloc-trim"
                    "--background-index"
                    "--clang-tidy"
                    "--cross-file-rename"
                    "--completion-style=detailed"
                    "--pch-storage=memory"
                    "--header-insertion=never"
                    "--header-insertion-decorators=0")))
  :hook (LaTeX-mode . eglot-ensure))
#+end_src

** C and C++

#+begin_src emacs-lisp
;; (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
;; (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
;; (add-to-list 'major-mode-remap-alist
;;              '(c-or-c++-mode . c-or-c++-ts-mode))
#+end_src

** Rust
Funny orange crab

#+begin_src emacs-lisp
(let ((cargo-path (expand-file-name "~/.cargo/bin")))
  (setenv "PATH" (concat cargo-path ":" (getenv "PATH")))
  (add-to-list 'exec-path cargo-path))

(use-package rust-mode
  :config
  (add-to-list 'eglot-server-programs
               '((rust-mode) .
                 ("rust-analyzer" :initializationOptions (:check (:command "clippy"))))))

;; TODO Improved `rust-mode', is this worth keeping around?
(use-package rustic
  :custom
  (rustic-lsp-client 'eglot)
  :config
  (add-to-list 'eglot-server-programs
               '((rustic-mode) .
                 ("rust-analyzer" :initializationOptions (:check (:command "clippy"))))))
#+end_src

** Haskell
The one and only

#+begin_src emacs-lisp
(use-package haskell-mode
  :init
  (setq flymake-allowed-file-name-masks '())
  :config
  (let ((my-ghcup-path (expand-file-name "~/.ghcup/bin")))
    (setenv "PATH" (concat my-ghcup-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-ghcup-path))
  (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
    (setenv "PATH" (concat my-cabal-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-cabal-path))
  :bind (:map haskell-mode-map
              ("M-n" . 'haskell-goto-next-error)
              ("M-p" . 'haskell-goto-prev-error)))

(use-package hindent
  :after haskell-mode
  :hook (haskell-mode . hindent-mode)
  :diminish)
#+end_src

** OCaml
Setup merlin etc
#+begin_src emacs-lisp
(let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    (setq merlin-command 'opam)))
#+end_src

** Z3
SMT solving aaaa

#+begin_src emacs-lisp
(use-package z3-mode
  :mode "\\.smt\\'")
#+end_src

** Agda
Load this after the ghc path is set

#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
             (shell-command-to-string "agda-mode locate")))
#+end_src

** Clojure
I guess?

#+begin_src emacs-lisp
(use-package cider
  :hook (clojure-mode . cider-mode))
#+end_src

** Python
Support for virtual environments

#+begin_src emacs-lisp
(use-package pyvenv)
#+end_src

** Lua
🇧🇷

#+begin_src emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-level 2)
  (lua-indent-nested-block-content-align nil))
#+end_src

** COMMENT Nix
❄

#+begin_src emacs-lisp
(use-package nix-ts-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-ts-mode))
#+end_src

** LaTeX and Citar
Work with citations
Also requires auctex

#+begin_src emacs-lisp
(defun darius/LaTeX-mode-setup ()
  (progn
    (add-to-list 'TeX-view-program-selection '(output-pdf "Zathura"))
    (add-to-list 'reftex-ref-style-default-list "Hyperref")
    (TeX-source-correlate-mode t)
    (define-key LaTeX-mode-map (kbd "C-c C-r") 'reftex-reference)
    (font-latex-add-keywords '(("autoref" "*{") ("Autoref" "{")) 'reference)))

(use-package tex
  :ensure auctex
  :config
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq LaTeX-electric-left-right-brace t)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-default-bibliography "~/Documents/library.bib")
  (setq-default TeX-master 'shared)
  (setq-default TeX-command-extra-options "--shell-escape")
  :hook
  (LaTeX-mode . turn-on-flyspell)
  (LaTeX-mode . hl-line-mode)
  (LaTeX-mode . darius/LaTeX-mode-setup)
  (LaTeX-mode . turn-on-reftex))

(use-package citar
  :custom
  (citar-file-open-functions '(("html" . citar-file-open-external) ("pdf" . citar-file-open-external) (t . find-file)))
  (org-cite-global-bibliography '("~/Documents/library.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup)
  :bind ("C-c z" . 'citar-insert-citation)
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

(use-package citar-embark
  :after citar embark
  :diminish
  :config (citar-embark-mode))

(use-package cdlatex
  :custom (cdlatex-takeover-parenthesis nil)
  :hook (LaTeX-mode . turn-on-cdlatex))
#+end_src

* Custom Functions
Various cringe
** COMMENT Todo comments
Prompt for a string and insert a command with that string.

~hl-todo~ seems to have something similar called ~hl-todo-occur~

#+begin_src emacs-lisp
(setq darius/comment-keyword-list
      '(("TODO") ("FIXME") ("NOTE") ("OPTIMIZE") ("HACK") ("BUG")))

(defun darius/todo-occur ()
  "List all lines containing a keyword from `darius/comment-keyword-list'"
  (interactive)
  (let ((keyword (completing-read "Occur keyword: " darius/comment-keyword-list)))
    (occur keyword)))
#+end_src

** Notify-send
Send a notification using ~notify-send~

#+begin_src emacs-lisp
(defun darius/notify-send (msg)
  (shell-command (format "notify-send %s" msg) nil nil))
#+end_src

** COMMENT Scroll half pages
C-v and M-v scrolling entire pages is kind of disorienting

#+begin_src emacs-lisp
(defun darius/scroll-up (amount)
  (interactive)
  (scroll-up-command
   (floor
    (- (window-height)
       next-screen-context-lines)
    (/ 1 amount))))

(defun darius/scroll-down (amount)
  (interactive)
  (scroll-down-command
   (floor
    (- (window-height)
       next-screen-context-lines)
    (/ 1 amount))))
#+end_src
