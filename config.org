#+TITLE: Emacs configuration
#+AUTHOR: Darius Schefer
#+PROPERTY: header-args:emacs-lisp :tangle init.el :mkdirp yes
#+STARTUP: overview

* Basic stuff
** Garbage collection
Make emacs run garbage collection less often

#+begin_src emacs-lisp
(setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024)))
#+end_src

** Default clutter
Adjust some default settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(blink-cursor-mode 0)
(setq frame-resize-pixelwise t)
(setq use-dialog-box nil)
#+end_src

** Annoying files
Disble all annoying auto-generated files and make ~custom.el~ disappear

#+begin_src emacs-lisp
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setq backup-by-copying t)
(setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo" user-emacs-directory))))

;; Enable when lockfiles become annoying
;; (setq create-lockfiles nil)

(setq custom-file "/dev/null")
#+end_src

** Better editing experience
Line numbers, parentheses, line highlighting, ...

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(setq-default indent-tabs-mode nil)
(global-display-line-numbers-mode t)
(column-number-mode t)
(show-paren-mode t)
(global-hl-line-mode t)
(global-visual-line-mode t)
(add-to-list 'write-file-functions 'delete-trailing-whitespace)
#+end_src

** Man pages
Make manpages look a little better

#+begin_src emacs-lisp
(require 'man)
(set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
(set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+end_src

** Dired
Directory editing

#+begin_src emacs-lisp
(setq dired-dwim-target 1)

;; Use system trash
(setq delete-by-moving-to-trash 1)
#+end_src

** Default Applications
Default programs for opening filetypes
This is probably he wrong way to do it?

#+begin_src emacs-lisp
(setq org-file-apps '((auto-mode . emacs) (directory . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . "zathura %s")))
#+end_src

** Font setup
Iosevka is the best font fight me.
Need to set it in an extra hook to make it work in emacsclient frames.

#+begin_src emacs-lisp
(setq darius/fixed-pitch-font "Iosevka Nerd Font Mono")
(setq darius/variable-pitch-font "Iosevka Aile")

(defun darius/set-up-fonts ()
  (set-face-attribute 'default nil :font darius/fixed-pitch-font :height 150)
  (set-face-attribute 'variable-pitch nil :font  darius/variable-pitch-font :weight 'regular)
  (set-face-attribute 'fixed-pitch nil :font darius/fixed-pitch-font))

(add-hook 'after-init-hook 'darius/set-up-fonts)
(add-hook 'server-after-make-frame-hook 'darius/set-up-fonts)
#+end_src

* Packages
** Setup
Basic ~package.el~ config

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Useful random stuff
Some packages that don't fit the other categories

#+begin_src emacs-lisp
(use-package trashed)

(use-package undo-tree
  :diminish
  :config (global-undo-tree-mode))

(use-package git-gutter
  :diminish
  :init
  (setq
   git-gutter:modified-sign "│"
   git-gutter:added-sign "│"
   git-gutter:deleted-sign "│")
  :config
  (set-face-foreground 'git-gutter:modified "LightSteelBlue")
  (global-git-gutter-mode t))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode)

(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))
#+end_src

** Evil
Not really a fan but text editing is even worse without it.
I have no idea what needs to go in ~:init~ and what in ~:config~

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  (evil-mode 1)
  :config
  (evil-set-undo-system 'undo-tree)
  (setq evil-mode-line-format nil))	; no <N> indicator in modeline

(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+end_src

** Magit
Very nice git interface

#+begin_src emacs-lisp
(use-package magit-todos)
(use-package magit
  :after magit-todos
  :config (magit-todos-mode t))
#+end_src

** Org
Some org-mode tweaks

#+begin_src emacs-lisp
(defun darius/org-setup ()
  (setq org-directory "~/Notes")
  (setq org-default-notes-file (concat org-directory "/scratch.org"))
  (setq org-agenda-files '("~/Notes"))
  (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  (setq org-return-follows-link t))

(defun darius/org-font-setup ()
  (custom-set-faces '(org-document-title ((t (:height 1.3)))))
  ;; Larger font size for some headings
  (dolist (face '((org-level-1 . 1.15)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font darius/fixed-pitch-font :weight 'regular :height (cdr face))))

(use-package org
  :config
  (darius/org-setup)
  (darius/org-font-setup)
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0)
  (setq org-ellipsis "▾")
  ;; Bullets for list items
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

(add-hook 'org-mode-hook 'org-indent-mode)

;; Fix weird internal link behavior
(with-eval-after-load 'org-ctags (setq org-open-link-functions nil))
#+end_src

** Citar
Work with citations

#+begin_src emacs-lisp
(use-package citar
  :custom
  (citar-bibliography '("~/Documents/library.bib")))
#+end_src

** LSP Mode
Set up LSP and some enhancements

#+begin_src emacs-lisp
(defun darius/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))


(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (lsp-mode . darius/lsp-mode-setup)
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
#+end_src

** Minibuffer completion
Set up vertico, orderless and savehist and tweak some emacs completion defaults

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(substring orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package savehist
  :init (savehist-mode))
#+end_src

** Marginalia
Marginalia shows some additional information inside the minibuffer

#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

** Colorscheme
The most important thing tbh

#+begin_src emacs-lisp
;; (load-theme 'modus-operandi)
(use-package ef-themes
:config (ef-themes-select 'ef-dark))
#+end_src

** Diminish
Get rid of some clutter in the modeline

#+begin_src emacs-lisp
(use-package diminish
  :diminish visual-line-mode
  :diminish auto-revert-mode
  :diminish evil-collection-unimpaired-mode)
#+end_src
