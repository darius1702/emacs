#+TITLE: Emacs configuration
#+AUTHOR: Darius Schefer
#+PROPERTY: header-args:emacs-lisp :tangle init.el :mkdirp yes
#+STARTUP: show2levels

* Early init
** No premature redisplay
Prevent some flickering on startup

#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t -*-
(setq-default inhibit-redisplay t
              inhibit-message t)
(add-hook 'window-setup-hook
          (lambda ()
            (setq-default inhibit-redisplay nil
                          inhibit-message nil)
            (redisplay)))
#+end_src

** Faster startup
Change some variables until after startup to make emacs load faster

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold (* 1000 1000 1000))

(defvar darius/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(defvar darius/vc-handled-backends vc-handled-backends)
(setq vc-handled-backends nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist darius/file-name-handler-alist
                  vc-handled-backends darius/vc-handled-backends)))
#+end_src

** Default clutter
Adjust some default settings

#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-message t)
(setq native-comp-async-report-warnings-errors nil)
(setq initial-scratch-message "")
(setq server-client-instructions nil)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(blink-cursor-mode 0)
(setq frame-resize-pixelwise t)
(setq use-dialog-box nil)
#+end_src

* Basic stuff
** Annoying files
Disble all annoying auto-generated files and make ~custom-set-variables~ go to their own file

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setq backup-by-copying t)
(setq undo-tree-history-directory-alist `(("." . ,(expand-file-name "tmp/undo" user-emacs-directory))))

;; Enable when lockfiles become annoying
;; (setq create-lockfiles nil)

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Better editing experience
Some sensible defaults

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-unset-key (kbd "C-x C-c"))      ; stop accidentally quitting emacs

(setq read-buffer-completion-ignore-case t)
(setq display-line-numbers-type 'relative)
(setq-default indent-tabs-mode nil)
(column-number-mode t)
(show-paren-mode t)
(global-visual-line-mode t)
(add-to-list 'write-file-functions 'delete-trailing-whitespace)
#+end_src

** Prog-mode setup
Make programming-modes a little nicer with line numbers and current line highlighting

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Man pages
Make manpages look a little better

#+begin_src emacs-lisp
(require 'man)
(set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
(set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+end_src

** Ibuffer
Buffer switching and management

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-expert t)
(setq ibuffer-display-summary nil)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("Code" (or (derived-mode . prog-mode) (mode . ess-mode)
                           (mode . compilation-mode)))
               ("Dired" (mode . dired-mode))
               ("Org" (mode . org-mode))
               ("Emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")
                         (name . "^\\*Async-native-compile-log\\*$")))))))

(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              (vc-status 16 16 :left)
              " "
              vc-relative-file)))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")
            (ibuffer-auto-mode t)))

(use-package ibuffer-vc)
#+end_src

** Dired
Make dired recognize other buffers as copy/move targets and also list human-readable filesizes

#+begin_src emacs-lisp
(setq dired-dwim-target 1)
(setq dired-listing-switches "-alh"):config

(use-package dired-open
  :config
  (setq dired-open-extensions '(("pdf" . "zathura")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src

** Default Applications
Default programs for opening filetypes
This is probably he wrong way to do it?

#+begin_src emacs-lisp
(setq org-file-apps '((auto-mode . emacs) (directory . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . "zathura %s")))
#+end_src

** Font setup
Iosevka is the best font fight me.
Need to set it in an extra hook to make it work in emacsclient frames.

#+begin_src emacs-lisp
(setq darius/fixed-pitch-font "Iosevka Nerd Font Mono")
(setq darius/variable-pitch-font "Iosevka Aile")

(defun darius/set-up-fonts ()
  (set-face-attribute 'default nil :font darius/fixed-pitch-font :height 150)
  (set-face-attribute 'variable-pitch nil :font  darius/variable-pitch-font :weight 'regular)
  (set-face-attribute 'fixed-pitch nil :font darius/fixed-pitch-font))

(add-hook 'after-init-hook 'darius/set-up-fonts)

;; This doesn't set a variable-pitch font in deamon mode
;; but `server-after-make-frame-hook' is really slow with multiple frames
(add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font Mono-15"))
#+end_src

* Packages
** Setup
Basic ~package.el~ config

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq package-native-compile t)         ; this will just be ignored if native-comp isn't available
#+end_src

** Useful random stuff
Some packages that don't require much configuration

*** Magit
Very nice git interface

#+begin_src emacs-lisp
(use-package magit)
#+end_src

*** Marginalia
Usful info in the minibuffer

#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

*** Rainbow-mode
Colorize strings like #a7c080

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init (rainbow-mode)
  :diminish rainbow-mode)
#+end_src

*** Consult
Some nice additional completing-read stuff

#+begin_src emacs-lisp
(use-package consult)
#+end_src

*** Undo-tree
Tree-like undo functionality

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish
  :config (global-undo-tree-mode))
#+end_src

*** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode)
#+end_src

*** Expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))
#+end_src

** Git-gutter
Some highlights in the gutter to show git status

#+begin_src emacs-lisp
(use-package git-gutter
  :diminish
  :init
  (setq
   git-gutter:update-interval 0
   git-gutter:modified-sign "│"
   git-gutter:added-sign "│"
   git-gutter:deleted-sign "│")
  :config
  (set-face-foreground 'git-gutter:modified "#7fbbb3")
  :hook (prog-mode . git-gutter-mode))
#+end_src

** Evil
Not really a fan but text editing is even worse without it.
I have no idea what needs to go in ~:init~ and what in ~:config~

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  (evil-mode 1)
  :config
  (evil-set-undo-system 'undo-tree)
  (setq evil-mode-line-format nil))	; no <N> indicator in modeline

;; Make RET still follow links in org mode
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+end_src

** General
Setup keybindings

#+begin_src emacs-lisp
(use-package general
  :config (general-evil-setup)

  (general-create-definer darius/leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix "SPC")

  (darius/leader-keys
   "SPC" '(switch-to-buffer             :wk "Switch to buffer")
   "/"   '(consult-line                 :wk "Consult line")
   "d"   '(dired                        :wk "Dired")
   "p"   '(consult-yank-from-kill-ring  :wk "Paste from history")
   "x"   '(execute-extended-command     :wk "M-x"))

  (darius/leader-keys
   "b"   '(:ignore t                    :wk "Buffer")
   "b b" '(ibuffer                      :wk "Ibuffer")
   "b f" '(consult-buffer               :wk "Find")
   "b k" '(kill-buffer                  :wk "Kill")
   "b w" '(widen                        :wk "Widen"))

  (darius/leader-keys
   "c"   '(:ignore t                    :wk "Compiler")
   "c c" '(compile                      :wk "Compile")
   "c e" '(consult-compile-error        :wk "Goto error")
   "c r" '(recompile                    :wk "Recompile"))

  (darius/leader-keys
   "f"   '(:ignore t                    :wk "Find")
   "f f" '(find-file                    :wk "File")
   "f g" '(consult-ripgrep              :wk "Grep")
   "f i" '(consult-imenu-multi          :wk "Imenu")
   "f m" '(man                          :wk "Manpage"))

  (darius/leader-keys
   "g"   '(:ignore t                    :wk "Git")
   "g n" '(git-gutter:next-hunk         :wk "Next hunk")
   "g p" '(git-gutter:previous-hunk     :wk "Previous hunk")
   "g s" '(magit-status                 :wk "Status")
   "g v" '(git-gutter:popup-hunk        :wk "View hunk"))

  (darius/leader-keys
   "h"   '(:ignore t                    :wk "Help")
   "h f" '(describe-function            :wk "Function")
   "h k" '(describe-key                 :wk "Key")
   "h v" '(describe-variable            :wk "Variable"))

  (darius/leader-keys
   "l"   '(:ignore t                    :wk "LaTeX")
   "l e" '(LaTeX-environment            :wk "Environment")
   "l m" '(TeX-insert-macro             :wk "Macro")
   "l s" '(LaTeX-section                :wk "Section"))

  (darius/leader-keys
   "o"   '(:ignore t                    :wk "Org")
   "o a" '(org-agenda                   :wk "Agenda")
   "o c" '(org-ctrl-c-ctrl-c            :wk "C-c C-c")
   "o f" '(consult-org-agenda           :wk "Find in Agenda")
   "o h" '(consult-org-heading          :wk "Heading")

   "o n"   '(:ignore t                  :wk "Narrow")
   "o n s" '(org-narrow-to-subtree      :wk "Subtree")

   "o p" '(org-insert-link              :wk "Insert link")
   "o t" '(org-todo                     :wk "Todo")
   "o y" '(org-store-link               :wk "Copy link"))

  (darius/leader-keys
   "w"   '(:ignore t                    :wk "Window")
   "w h" '(evil-window-left             :wk "Left")
   "w j" '(evil-window-down             :wk "Down")
   "w k" '(evil-window-up               :wk "Up")
   "w l" '(evil-window-right            :wk "Right")
   "w n" '(evil-window-new              :wk "New")
   "w o" '(delete-other-windows         :wk "Delete others")
   "w q" '(evil-quit                    :wk "Quit")
   "w r" '(evil-window-rotate-downwards :wk "Quit")
   "w w" '(evil-window-next             :wk "Next"))

  (darius/leader-keys
   "z"   '(:ignore t                    :wk "Citation")
   "z d" '(citar-dwim                   :wk "Dwim")
   "z i" '(citar-insert-citation        :wk "Insert")
   "z o" '(citar-open                   :wk "Open")))
#+end_src

** Org
Some org-mode tweaks

#+begin_src emacs-lisp
(defun darius/org-setup ()
  (setq org-directory "~/Notes")
  (setq org-default-notes-file (concat org-directory "/scratch.org"))
  (setq org-agenda-files '("~/Notes"))
  (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  (setq org-return-follows-link t))

(defun darius/org-font-setup ()
  (custom-set-faces '(org-document-title ((t (:height 1.3)))))
  ;; Larger font size for some headings
  (dolist (face '((org-level-1 . 1.15)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font darius/fixed-pitch-font :weight 'regular :height (cdr face))))

(use-package org
  :config
  (darius/org-setup)
  (darius/org-font-setup)
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0)
  (setq org-ellipsis "▾")
  ;; Bullets for list items
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

(add-hook 'org-mode-hook 'org-indent-mode)

;; Fix weird internal link behavior
(with-eval-after-load 'org-ctags (setq org-open-link-functions nil))
#+end_src

** LaTeX and Citar
Work with citations
Also requires auctex

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex)

(use-package citar
  :custom
  (citar-bibliography '("~/Documents/library.bib")))
#+end_src

** Completion at point
Corfu for in-buffer completion

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto nil)
  (corfu-auto-prefix 0)
  (corfu-auto-delay 0)
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  :bind
  (:map corfu-map
        ("C-n" . corfu-next)
        ("C-p" . corfu-previous)
        ("RET" . nil))

  :init (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+end_src

** Minibuffer completion
Set up vertico, orderless and savehist and tweak some emacs completion defaults

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(substring orderless basic)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package savehist
  :init (savehist-mode))
#+end_src

** Colorscheme
The most important thing tbh.
doom-everforest theme depends on the ~doom-themes~ package
- [ ] Get rid of ~doom-themes~ dependency

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/doom-everforest-theme")
(setq doom-everforest-background "hard")
(use-package doom-themes
:config
(doom-themes-org-config)
(setq doom-themes-enable-italic nil))

(defun darius/set-buffer-name-color (window)
  "Color the filename in the currently selected buffer based on whether it's modified and dim it in inactive buffers"
  (with-current-buffer (window-buffer window)
    (if (not (eq (current-buffer) (window-buffer (selected-window))))
        (face-remap-set-base 'mode-line-buffer-id '(:foreground "#414b50"))
      (if (buffer-modified-p)
        (face-remap-set-base 'mode-line-buffer-id '(:foreground "#e67e80"))
        (face-remap-set-base 'mode-line-buffer-id '(:foreground "#a7c080"))))))

(add-hook 'post-command-hook (lambda () (walk-windows #'darius/set-buffer-name-color nil t)))

(load-theme 'doom-everforest t)
#+end_src

** Diminish
Get rid of some clutter in the modeline
Doesn't work properly if it's not all the way at the end for some reason

#+begin_src emacs-lisp
(use-package diminish
  :diminish visual-line-mode
  :diminish auto-revert-mode
  :diminish evil-collection-unimpaired-mode)
#+end_src

* Languages
Programming language specific stuff

** Haskell
The one and only

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (let ((my-ghcup-path (expand-file-name "~/.ghcup/bin")))
    (setenv "PATH" (concat my-ghcup-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-ghcup-path)))
#+end_src

* Window Management
Emacs as an X window manager!

** Custom functions
Some functions to make stuff easier

#+begin_src emacs-lisp
(defun darius/get_executables_in_path ()
  (split-string (shell-command-to-string "dmenu_path") "\n"))

(defun darius/run ()
  (interactive)
  (let* ((option (completing-read "Run: " (darius/get_executables_in_path))))
    (start-process option nil option))) ;; re-use option for process name as well

(defun darius/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun darius/exwm-update-title ()
  (pcase exwm-class-name
    ("firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

(defun darius/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun darius/set-volume (amount)
  "Set the system volume to the AMOUNT string using pactl"
  (let ((command (format "pactl -- set-sink-volume @DEFAULT_SINK@ %s" amount)))
    (start-process-shell-command command nil command)))

(defun darius/volume-up-percent (amount)
  "Increase system volume by AMOUNT percent"
  (darius/set-volume (format "+%d%%" amount)))

(defun darius/volume-down-percent (amount)
  "Decrease system volume by AMOUNT percent"
  (darius/set-volume (format "-%d%%" amount)))

(defun darius/volume-mute ()
  "Mute system volume using pactl"
  (let ((command "pactl -- set-sink-mute @DEFAULT_SINK@ toggle"))
    (start-process-shell-command command nil command)))

(defun darius/mic-mute ()
  "Mute the microphone using pactl"
  (let ((command "pactl -- set-source-mute 0 toggle"))
    (start-process-shell-command command nil command)))

(defun darius/set-brightness (amount)
  "Pass AMOUNT string to brightnessctl"
  (let ((command (format "brightnessctl s %s" amount)))
    (start-process-shell-command command nil command)))

(defun darius/brightness-up (amount)
  "Increase screen brightness by AMOUNT"
  (darius/set-brightness (format "%d+" amount)))

(defun darius/brightness-down (amount)
  "Decrease screen brightness by AMOUNT"
  (darius/set-brightness (format "%d-" amount)))

(defun darius/lock-screen ()
  "Lock the screen using i3lock"
  (start-process-shell-command "~/.config/i3/lock.sh" nil "~/.config/i3/lock.sh"))

(defun darius/trackpad-toggle ()
  "Disable the trackpad using xinput"
  (start-process-shell-command "~/Dotfiles/scripts/toggle_trackpad.sh" nil "~/Dotfiles/scripts/toggle_trackpad.sh"))
#+end_src

** Startup hook
Hook that runs on EXWM startup, setting up keybindings and some other things

#+begin_src emacs-lisp
(defun darius/exwm-init-hook ()
  ;; Make workspace 1 be the one where we land at startup
  (exwm-workspace-switch-create 1)

  ;; Show battery status in the mode line
  (display-battery-mode 1)

  ;; Launch apps that will run in the background
  (darius/run-in-background "nm-applet"))

  ;; Screen lock
  (exwm-input-set-key (kbd "C-s-l") (lambda () (interactive) (darius/lock-screen)))

  ;; Media Keys
  (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") (lambda () (interactive) (darius/volume-up-percent 5)))
  (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") (lambda () (interactive) (darius/volume-down-percent 5)))
  (exwm-input-set-key (kbd "<XF86AudioMute>") (lambda () (interactive) (darius/volume-mute)))
  (exwm-input-set-key (kbd "<XF86AudioMicMute>") (lambda () (interactive) (darius/mic-mute)))
  (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") (lambda () (interactive) (darius/brightness-up 20)))
  (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive) (darius/brightness-down 20)))
  (exwm-input-set-key (kbd "<XF86Favorites>") (lambda () (interactive) (darius/trackpad-toggle)))
#+end_src

** EXWM setup
EXWM config stuff

#+begin_src emacs-lisp
(use-package exwm
  :config
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 10)

  ;; When EXWM starts up, do some extra configuration
  (add-hook 'exwm-init-hook #'darius/exwm-init-hook)

  ;; When window "class" updates, use it to set the buffer name
  ;; Also update firefox buffer name based on window title
  (add-hook 'exwm-update-class-hook #'darius/exwm-update-class)
  (add-hook 'exwm-update-title-hook #'darius/exwm-update-title)

  ;; Rebind CapsLock to Ctrl
  ;; (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

  ;; Set the screen resolution (update this to be the correct resolution for your screen!)
  (require 'exwm-randr)
  (exwm-randr-enable)
  ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

  ;; Load the system tray before exwm-init
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\C-w ;; Evil window management
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\ ))  ;; Ctrl+Space

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([?\s-h] . windmove-left)
          ([?\s-j] . windmove-down)
          ([?\s-k] . windmove-up)
          ([?\s-l] . windmove-right)

          ;; Launch applications via shell command
          ([?\s-d] . (lambda ()
                       (interactive)
                       (darius/run)))

          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$: ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9)))))
#+end_src
